#+TITLE: Emacs Configuration
#+AUTHOR: Lu Dang
#+EMAIL: eclipselu@gmail.com
#+OPTIONS: toc:nil num:nil

* use-package setup
Use =use-package= to manage packages.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq load-prefer-newer t)

  (use-package diminish
    :ensure t)
#+END_SRC

* locale
#+BEGIN_SRC emacs-lisp
  (defun sanityinc/utf8-locale-p (v)
    "Return whether locale string V relates to a UTF-8 locale."
    (and v (string-match "UTF-8" v)))

  (defun sanityinc/locale-is-utf8-p ()
    "Return t iff the \"locale\" command or environment variables prefer UTF-8."
    (or (sanityinc/utf8-locale-p (and (executable-find "locale") (shell-command-to-string "locale")))
	(sanityinc/utf8-locale-p (getenv "LC_ALL"))
	(sanityinc/utf8-locale-p (getenv "LC_CTYPE"))
	(sanityinc/utf8-locale-p (getenv "LANG"))))

  (when (or window-system (sanityinc/locale-is-utf8-p))
    (set-language-environment 'utf-8)
    (setq locale-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-selection-coding-system (if (eq system-type 'windows-nt) 'utf-16-le 'utf-8))
    (prefer-coding-system 'utf-8))
#+END_SRC
* Bootstrap
Allow access from emacsclient
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

No backup files, no autosave files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

Try packages without installing them.

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

Which-key.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

Wrap automatically
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
;; (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Clipboard configuration, donot tamper system clipboard with emacs clipboard. Use =cmd-v= to paste from system clipbaord
#+BEGIN_SRC emacs-lisp
(use-package simpleclip
  :ensure t
  :init
  (simpleclip-mode 1))
#+END_SRC

* Interface tweaks
** TODO make pretty symbol mode available only in elisp
   http://ergoemacs.org/emacs/emacs_pretty_lambda.html

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-hl-line-mode t)

  (defalias 'list-buffers 'ibuffer-other-window) ;; type q to quit the ibuffer

  (setq-default initial-scratch-message
		(concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n"))

  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;; (when (fboundp 'global-prettify-symbols-mode)
  ;;   (global-prettify-symbols-mode))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; make titlebar transparent and the same color as the colorscheme
  (add-to-list 'default-frame-alist '(ns-appearance . 'dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (split-window-horizontally)

#+END_SRC

* Fonts
** TODO setup fallback fonts for other unicode chars
#+BEGIN_SRC emacs-lisp
  ;; (set-fontset-font "fontset-default" 'han '("STHeiti"))
  ;; (set-default-font "Source Code Pro 14")
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font 14"))
  (set-fontset-font "fontset-default" 'han '("PingFang SC"))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  ;; (use-package color-theme-modern
  ;;   :ensure t
  ;;   :config
  ;;   (use-package color-theme-sanityinc-solarized
  ;;     :ensure t)
  ;;   (load-theme 'sanityinc-solarized-light t))

  (use-package naysayer-theme
    :ensure t
    :config
    (load-theme 'naysayer t))

  ;; (use-package timu-spacegrey-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'timu-spacegrey t))
#+END_SRC

* Ivy/Swipe/Counsel
Use ivy for navigation.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)

    ))
#+END_SRC
* Org mode
** Org look and feel
  #+BEGIN_SRC emacs-lisp
    ;; (setq org-ellipsis " ▼")
    (setq org-ellipsis " ⤵")
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
  #+END_SRC
